import fastf1
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

fastf1.Cache.enable_cache('cache')

yearly_data = {}

for year in range(2022, 2026):
    schedule = fastf1.get_event_schedule(year)
    pos_diffs = []

    for _, row in schedule.iterrows():
        if row['EventFormat'] != 'conventional':
            continue

        try:
            session = fastf1.get_session(year, row['RoundNumber'], 'R')
            session.load()
        except:
            continue
        if session.weather_data['Rainfall'].sum() > 0:
            continue

        for drv in session.drivers:
            driver_name = session.get_driver(drv)['FullName']

            # --- Exclusion condition (only Lance Stroll 2023) ---
            exclude = False
            if year == 2023 and driver_name == 'Lance Stroll':
                exclude = True

            if exclude:
                continue
            # --- End of exclusion condition ---

            laps = session.laps.pick_driver(drv)
            if laps.empty or drv not in session.results.index:
                continue

            result = session.results.loc[drv]
            if result['Status'] != 'Finished':
                continue

            drv_data = yearly_data.setdefault((year, drv), {
                'BrakeCount': 0,
                'TotalLaps': 0,
                'SpeedList': [],
                'RpmList': [],
                'DrsUsage': 0,
                'DrsPossible': 0,
                'PosDiffList': [],
                'Name': driver_name
            })

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° position diff (grid - finish)
            pos_diff = result['GridPosition'] - result['Position']
            drv_data['PosDiffList'].append(pos_diff)
            pos_diffs.append(pos_diff)


        for lap in laps.iterlaps():
                tel = lap[1].get_telemetry()
                braking = tel[(tel['Brake'] == True) & (tel['Throttle'] == 0)]
                drv_data['BrakeCount'] += len(braking)
                drv_data['SpeedList'].extend(tel['Speed'].dropna())
                drv_data['RpmList'].extend(tel['RPM'].dropna())
                drv_data['DrsUsage'] += tel['DRS'].fillna(0).gt(0).sum()
                drv_data['DrsPossible'] += tel['DRS'].notna().sum()
                drv_data['TotalLaps'] += 1

# --- START OF SPECIFIC DRIVER DATA EXTRACTION (Only Lance Stroll 2023) ---
specific_data_stroll_2023 = {}

year_2023 = 2023
schedule_2023 = fastf1.get_event_schedule(year_2023)

for _, row in schedule_2023.iterrows():
    if row['EventFormat'] != 'conventional':
        continue
    try:
        session_2023 = fastf1.get_session(year_2023, row['RoundNumber'], 'R')
        session_2023.load()

        for drv in session_2023.drivers:
            driver_name = session_2023.get_driver(drv)['FullName']
            if driver_name == 'Lance Stroll':
                laps = session_2023.laps.pick_driver(drv)
                if not laps.empty and drv in session_2023.results.index and session_2023.results.loc[drv]['Status'] == 'Finished':
                    result = session_2023.results.loc[drv]
                    pos_diff = result['GridPosition'] - result['Position']

                    drv_data_specific = specific_data_stroll_2023.setdefault((year_2023, driver_name, session_2023.event['EventName']), {
                        'BrakeCount': 0,
                        'TotalLaps': 0,
                        'SpeedList': [],
                        'RpmList': [],
                        'DrsUsage': 0,
                        'DrsPossible': 0,
                        'PosDiffList': [pos_diff],
                        'Name': driver_name
                    })

                    tel = laps.get_telemetry()
                    braking = tel[(tel['Brake'] == True) & (tel['Throttle'] == 0)]
                    drv_data_specific['BrakeCount'] += len(braking)
                    drv_data_specific['SpeedList'].extend(tel['Speed'].dropna())
                    drv_data_specific['RpmList'].extend(tel['RPM'].dropna())
                    drv_data_specific['DrsUsage'] += tel['DRS'].fillna(0).gt(0).sum()
                    drv_data_specific['DrsPossible'] += tel['DRS'].notna().sum()
                    drv_data_specific['TotalLaps'] += len(laps)
    except Exception as e:
        print(f"Error loading 2023 race {row['RoundNumber']}: {e}")

# --- Process the specific data for Stroll 2023 ---
specific_records_stroll_2023 = []
for (year, driver, event), values in specific_data_stroll_2023.items():
    drs_pct = (values['DrsUsage'] / values['DrsPossible']) * 100 if values['DrsPossible'] > 0 else 0
    specific_records_stroll_2023.append({
        'Year': year,
        'Driver': values['Name'],
        'Event': event,
        'PosDiff': values['PosDiffList'][0], # Since we're looking at single races here
        'BrakePerCorner': values['BrakeCount'] / values['TotalLaps'] if values['TotalLaps'] else 0,
        'AvgSpeed': np.mean(values['SpeedList']) if values['SpeedList'] else np.nan,
        'AvgRPM': np.mean(values['RpmList']) if values['RpmList'] else np.nan,
        'DRSUsagePct': drs_pct
    })

specific_df_stroll_2023 = pd.DataFrame(specific_records_stroll_2023)
print("\n--- Specific Data for Lance Stroll (2023) ---\n")
print(specific_df_stroll_2023.to_string(index=False))
# --- END OF SPECIFIC DRIVER DATA EXTRACTION ---

for (yr, drv), data in yearly_data.items():
        if data['PosDiffList']:  # Ensure the list is not empty
            pos_diffs_array = np.array(data['PosDiffList'])
            avg_driver_year_pos_diff = np.mean(pos_diffs_array)
            std_dev_driver_year = np.std(pos_diffs_array)

            # Calculate z-scores for each position difference for this driver in this year
            data['PosDiffZScores'] = [(val - avg_driver_year_pos_diff) / std_dev_driver_year
                                      if std_dev_driver_year != 0 else 0
                                      for val in pos_diffs_array]

            # Calculate the average of the z-scores for this driver in this year
            data['AvgPosDiffZScore'] = np.mean(data['PosDiffZScores']) if data['PosDiffZScores'] else 0
        else:
            data['PosDiffZScores'] = []
            data['AvgPosDiffZScore'] = 0

# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ---
records = []
for (year, drv), values in yearly_data.items():
    drs_pct = (values['DrsUsage'] / values['DrsPossible']) * 100 if values['DrsPossible'] > 0 else 0
    records.append({
        'Year': year,
        'Driver': values['Name'],
        'PosDiffZScore': values['AvgPosDiffZScore'], # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ z-score ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
        'BrakePerCorner': values['BrakeCount'] / values['TotalLaps'] if values['TotalLaps'] else 0,
        'AvgSpeed': np.mean(values['SpeedList']),
        'AvgRPM': np.mean(values['RpmList']),
        'DRSUsagePct': drs_pct
    })

df = pd.DataFrame(records)

#%%
# --- Clustering ---
features = ['PosDiffZScore', 'BrakePerCorner', 'AvgSpeed', 'AvgRPM', 'DRSUsagePct']
X = df[features]

# --- Elbow Method ---
inertia = []
K_range = range(1, 10)


# Remove rows with missing feature data once
X = df[features].dropna()
df_clean = df.loc[X.index].copy()  # Sync df_clean with the filtered rows

if X.empty:
    print("X is empty ‚Äî no complete rows to cluster.")
else:
    inertia = []
    K_range = range(1, 10)

    for k in K_range:
        km = KMeans(n_clusters=k, random_state=42)
        km.fit(X)
        inertia.append(km.inertia_)

    plt.figure(figsize=(8, 5))
    plt.plot(K_range, inertia, 'o-', color='purple')
    plt.title('Elbow Method For Optimal k')
    plt.xlabel('Number of Clusters (k)')
    plt.ylabel('Inertia')
    plt.xticks(K_range)
    plt.grid(True)
    plt.tight_layout()
    plt.show()



kmeans = KMeans(n_clusters=4, random_state=42)
df_clean['Cluster'] = kmeans.fit_predict(X)

# ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°
df_clean['ClusterLabel'] = df_clean['Cluster'].map({
    0: '0',
    1: '1',
    2: '2',
    3: '3'
})

pca = PCA(n_components=2)
components = pca.fit_transform(X)

plt.figure(figsize=(10, 6))
for cluster in df_clean['Cluster'].unique():
    idx = df_clean['Cluster'] == cluster
    label = df_clean[df_clean['Cluster'] == cluster]['ClusterLabel'].iloc[0]
    plt.scatter(components[idx, 0], components[idx, 1], label=label)

plt.title('F1 Driver Clustering (Per Year, 2021‚Äì2024)')
plt.xlabel('PCA 1')
plt.ylabel('PCA 2')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ---
for cluster_id in sorted(df_clean['Cluster'].unique()):
    label = df_clean[df_clean['Cluster'] == cluster_id]['ClusterLabel'].iloc[0]
    print(f"\nüèÅ Cluster {cluster_id} - {label}:\n")
    print(df_clean[df_clean['Cluster'] == cluster_id].sort_values(by=['Year', 'Driver']).to_string(index=False))
